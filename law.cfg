[core]

# inherit from the columnflow configuration file
inherit: $CF_BASE/law.cfg


[modules]

columnflow.tasks.cms.inference
columnflow.tasks.cms.external
dijet.tasks.{asymmetry,alpha,jer,root,sf,uhh2}
dijet.plotting.{asymmetry,alpha,jer,sf}


[logging]

law: INFO
luigi-interface: INFO
gfal2: WARNING
columnflow.columnar_util-perf: INFO


[analysis]

default_columnar_sandbox: bash::$DIJET_BASE/sandboxes/venv_columnar.sh

default_analysis: dijet.config.analysis_dijet.analysis_dijet
default_config: run2_2017_JMEnano_v9
default_dataset: data_jetht_b

production_modules: columnflow.production.{categories,normalization,processes}, columnflow.production.cms.{btag,electron,mc_weight,muon,pdf,pileup,scale,seeds}, dijet.production.{example,default}
calibration_modules: columnflow.calibration.cms.{jets,met}, dijet.calibration.{example,default}
selection_modules: columnflow.selection.cms.{json_filter, met_filters}, dijet.selection.{example,default,categories}
ml_modules: columnflow.ml
inference_modules: columnflow.inference

# namespace of all columnflow tasks
cf_task_namespace: cf

# wether or not the ensure_proxy decorator should be skipped, even if used by task's run methods
skip_ensure_proxy: False

# some remote workflow parameter defaults
htcondor_flavor: $CF_HTCONDOR_FLAVOR
htcondor_share_software: True
slurm_flavor: $CF_SLURM_FLAVOR
slurm_partition: $CF_SLURM_PARTITION

# ChunkedIOHandler defaults
chunked_io_chunk_size: 100000
chunked_io_pool_size: 2
chunked_io_debug: True

# csv list of task families that inherit from ChunkedReaderMixin and whose output arrays should be
# checked for non-finite values before saving them to disk (right now, supported tasks are
# cf.CalibrateEvents, cf.SelectEvents, cf.ProduceColumns, cf.PrepareMLEvents, cf.MLEvaluation,
# cf.UniteColumns)
check_finite_output: cf.CalibrateEvents, cf.SelectEvents, cf.ProduceColumns

# whether to log runtimes of array functions by default
log_array_function_runtime: False


[outputs]

# list of all used file systems
wlcg_file_systems: wlcg_fs, wlcg_fs_desy, wlcg_fs_infn_redirector, wlcg_fs_global_redirector

# list of file systems used by columnflow.tasks.external.GetDatasetLFNs.iter_nano_files to
# look for the correct fs per nano input file (in that order)
lfn_sources: local_desy_dcache, wlcg_fs_desy_store, wlcg_fs_infn_redirector, wlcg_fs_global_redirector, local_fs

# output locations per task family
# for local targets : "local[, LOCAL_FS_NAME or STORE_PATH]"
# for remote targets: "wlcg[, WLCG_FS_NAME]"
# (when WLCG_FS_NAME is empty, the tasks' "default_wlcg_fs" attribute is used)
cf.GetDatasetLFNs: local
cf.BundleSoftware: local
cf.BundleRepo: local
cf.BundleBashSandbox: local
cf.BundleCMSSWSandbox: local
cf.BundleExternalFiles: local
cf.CalibrateEvents: local
cf.SelectEvents: local
cf.CreateCutflowHistograms: local
cf.PlotCutflow: local
cf.PlotCutflowVariables: local
cf.ReduceEvents: local
cf.MergeReducedEvents: local
cf.ProduceColumns: local
cf.PrepareMLEvents: local
cf.MergeMLEvents: local
cf.MLTraining: local
cf.MLEvaluation: local
cf.CreateHistograms: local
cf.MergeHistograms: local
cf.MergeShiftedHistograms: local
cf.MergeReductionStats: local
cf.MergeSelectionStats: local
cf.CreatePileupWeights: local
cf.PlotVariables: local
cf.PlotVariables1D: local
cf.PlotShiftedVariables: local

dijet.Asymmetry: local
dijet.AlphaExtrapolation: local
dijet.JER: local
dijet.SF: local

dijet.PlotAsymmetries: local
dijet.PlotWidth: local
dijet.PlotJERs: local
dijet.PlotSFs: local

dijet.JERtoRoot: local


[job]

job_file_dir: $CF_JOB_BASE
job_file_dir_cleanup: False


[local_fs]

base: /

[local_desy_dcache]

base: /pnfs/desy.de/cms/tier2

[wlcg_fs]

# set this to your desired location
base: root://eosuser.cern.ch/eos/user/$CF_CERN_USER_FIRSTCHAR/$CF_CERN_USER/$CF_STORE_NAME
create_file_dir: True
use_cache: $CF_WLCG_USE_CACHE
cache_root: $CF_WLCG_CACHE_ROOT
cache_cleanup: $CF_WLCG_CACHE_CLEANUP
cache_max_size: 50GB

[wlcg_fs_desy]

base: &::xrootd_base
xrootd_base: root://dcache-cms-xrootd.desy.de:1094/pnfs/desy.de/cms/tier2/store/user/$CF_CERN_USER/$CF_STORE_NAME
gsiftp_base: gsiftp

[wlcg_fs_desy_store]

xrootd_base: root://dcache-cms-xrootd.desy.de:1094/pnfs/desy.de/cms/tier2
gsiftp_base: gsiftp://dcache-door-cms04.desy.de:2811/pnfs/desy.de/cms/tier2
base: &::xrootd_base
use_cache: $CF_WLCG_USE_CACHE
cache_root: $CF_WLCG_CACHE_ROOT
cache_cleanup: $CF_WLCG_CACHE_CLEANUP
cache_max_size: 15GB
cache_global_lock: True


[wlcg_fs_infn_redirector]

base: root://xrootd-cms.infn.it/
use_cache: $CF_WLCG_USE_CACHE
cache_root: $CF_WLCG_CACHE_ROOT
cache_cleanup: $CF_WLCG_CACHE_CLEANUP
cache_max_size: 15GB
cache_global_lock: True
cache_mtime_patience: -1


[wlcg_fs_global_redirector]

base: root://cms-xrd-global.cern.ch/
use_cache: $CF_WLCG_USE_CACHE
cache_root: $CF_WLCG_CACHE_ROOT
cache_cleanup: $CF_WLCG_CACHE_CLEANUP
cache_max_size: 15GB
cache_global_lock: True
cache_mtime_patience: -1
